// Описание обработки    123 132
Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
   // МассивНазначений.Добавить("Справочник.ДоговорыКонтрагентов");
    МассивНазначений.Добавить("Документ.ПриходныйОрдерНаТовары");
	МассивНазначений.Добавить("Документ.ПередачаДавальцу");
	МассивНазначений.Добавить("Документ.РасходныйОрдерНаТовары");
	
    ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
    ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
    ПараметрыРегистрации.Вставить("Наименование", "Печатная форма: Бирка ЕМИ");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь); 
	ПараметрыРегистрации.Вставить("Версия", "1.4");    
    ПараметрыРегистрации.Вставить("Информация", Метаданные().Комментарий);
 
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, 
					Метаданные().Синоним, 
					Метаданные().Имя, 
					"ВызовСерверногоМетода", 
					Истина, 
					"ПечатьMXL");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПЕЧАТНЫХ ФОРМ

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
    Колонка = Неопределено;
    
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, Метаданные().Имя) Тогда
		Если МассивОбъектов.Количество()>0 и ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,Метаданные().Имя,Метаданные().Синоним,СформироватьПечатнуюФормуБирки(МассивОбъектов, ОбъектыПечати, "ПриходныйОрдерНаТовары"));		
		ИначеЕсли МассивОбъектов.Количество()>0 и ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.ПередачаДавальцу") Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,Метаданные().Имя,Метаданные().Синоним,СформироватьПечатнуюФормуБирки(МассивОбъектов, ОбъектыПечати, "ПередачаДавальцу"));		
		ИначеЕсли МассивОбъектов.Количество()>0 и ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,Метаданные().Имя,Метаданные().Синоним,СформироватьПечатнуюФормуБирки(МассивОбъектов, ОбъектыПечати, "РасходныйОрдерНаТовары"));
		КонецЕсли;
	КонецЕсли;
	        
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
КонецПроцедуры

// Функция возвращает пустую структуру настроек
// 
// Параметры: 
//  Нет
// 
// Возвращаемое значение: 
//  Структура - структура настроек
Функция СтруктураНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные",                         Неопределено);
	СтруктураНастроек.Вставить("ОбязательныеПоля",                       Новый Массив);
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов", Новый Соответствие);
	СтруктураНастроек.Вставить("ПараметрыДанных"    ,                    Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек",                    Неопределено);
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных",         Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция СформироватьПечатнуюФормуБирки(МассивОбъектов, ОбъектыПечати, ИмяДокумента) экспорт
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("Серия");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
    
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ИмяДокумента="РасходныйОрдерНаТовары" Тогда
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаСерииНоменклатурыРеализация";
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP.ВидНоменклатурыНовый КАК ВидНоменклатурыНовый
			|ПОМЕСТИТЬ ВидыНоменклатурыЕССН
			|ИЗ
			|	РегистрСведений.евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP КАК евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP
			|
			|СГРУППИРОВАТЬ ПО
			|	евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP.ВидНоменклатурыНовый
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Документ.Ссылка КАК Документ,
			|	Документ.Номенклатура КАК Номенклатура,
			|	Документ.Характеристика КАК Характеристика,
			|	Документ.Серия КАК Серия,
			|	Документ.Количество КАК Количество,
			|	ТоварыОтбор.Ячейка КАК Ячейка,
			|	ВЫБОР
			|		КОГДА ВидыНоменклатурыЕССН.ВидНоменклатурыНовый ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Новый
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Документ.Серия КАК Серия,
			|			МАКСИМУМ(ТоварыОтбор.Ячейка) КАК Ячейка
			|		ИЗ
			|			Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК Документ
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ТоварыОтбор
			|				ПО Документ.Ссылка = ТоварыОтбор.Ссылка.Распоряжение
			|					И Документ.Серия = ТоварыОтбор.Серия
			|		ГДЕ
			|			Документ.Ссылка В(&МассивОбъектов)
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Документ.Серия) КАК ТоварыОтбор
			|		ПО Документ.Серия = ТоварыОтбор.Серия
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыНоменклатурыЕССН КАК ВидыНоменклатурыЕССН
			|		ПО Документ.Номенклатура.ВидНоменклатуры = ВидыНоменклатурыЕССН.ВидНоменклатурыНовый
			|ГДЕ
			|	Документ.Ссылка В(&МассивОбъектов)" ;
	ИначеЕсли ИмяДокумента="ПриходныйОрдерНаТовары" Тогда
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаСерииНоменклатуры";
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP.ВидНоменклатурыНовый КАК ВидНоменклатурыНовый
			|ПОМЕСТИТЬ ВидыНоменклатурыЕССН
			|ИЗ
			|	РегистрСведений.евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP КАК евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP
			|
			|СГРУППИРОВАТЬ ПО
			|	евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP.ВидНоменклатурыНовый
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Документ.Ссылка КАК Документ,
			|	Документ.Номенклатура КАК Номенклатура,
			|	Документ.Характеристика КАК Характеристика,
			|	Документ.Серия КАК Серия,
			|	Документ.Количество КАК Количество,
			|	ЕСТЬNULL(ТоварыРазмещение.Ячейка, ТоварыРазмещениеБезОснования.Ячейка) КАК Ячейка,
			|	ВЫБОР
			|		КОГДА ВидыНоменклатурыЕССН.ВидНоменклатурыНовый ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Новый
			|ИЗ
			|	Документ.ПриходныйОрдерНаТовары.Товары КАК Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Документ.Серия КАК Серия,
			|			МАКСИМУМ(ТоварыРазмещение.Ячейка) КАК Ячейка
			|		ИЗ
			|			Документ.ПриходныйОрдерНаТовары.Товары КАК Документ
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ТоварыРазмещение
			|				ПО Документ.Ссылка = ТоварыРазмещение.Ссылка.евт_ДокументОснование
			|					И Документ.Серия = ТоварыРазмещение.Серия
			|		ГДЕ
			|			Документ.Ссылка В(&МассивОбъектов)
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Документ.Серия) КАК ТоварыРазмещение
			|		ПО Документ.Серия = ТоварыРазмещение.Серия
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Документ.Серия КАК Серия,
			|			МАКСИМУМ(ТоварыРазмещение.Ячейка) КАК Ячейка
			|		ИЗ
			|			Документ.ПриходныйОрдерНаТовары.Товары КАК Документ
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ТоварыРазмещение
			|				ПО Документ.Серия = ТоварыРазмещение.Серия
			|					И (ЕСТЬNULL(ТоварыРазмещение.Ссылка.евт_ДокументОснование.Ссылка, ЗНАЧЕНИЕ(Документ.ПриходныйОрдерНаТовары.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ПриходныйОрдерНаТовары.ПустаяСсылка))
			|		ГДЕ
			|			Документ.Ссылка В(&МассивОбъектов)
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Документ.Серия) КАК ТоварыРазмещениеБезОснования
			|		ПО Документ.Серия = ТоварыРазмещениеБезОснования.Серия
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыНоменклатурыЕССН КАК ВидыНоменклатурыЕССН
			|		ПО Документ.Номенклатура.ВидНоменклатуры = ВидыНоменклатурыЕССН.ВидНоменклатурыНовый
			|ГДЕ
			|	Документ.Ссылка В(&МассивОбъектов)";
	Иначе
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаСерииНоменклатурыПередачаДавальцу";
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP.ВидНоменклатурыНовый КАК ВидНоменклатурыНовый
			|ПОМЕСТИТЬ ВидыНоменклатурыЕССН
			|ИЗ
			|	РегистрСведений.евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP КАК евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP
			|
			|СГРУППИРОВАТЬ ПО
			|	евт_ЕССН_СоответствиеВидовНоменклатурыСвойствERP.ВидНоменклатурыНовый
			|;  ВЫБРАТЬ
			|	Документ.Ссылка КАК Документ,
			|	Документ.Номенклатура КАК Номенклатура,
			|	Документ.Характеристика КАК Характеристика,
			|	Документ.Серия КАК Серия,
			|	Документ.Количество КАК Количество,
	        |   ЕСТЬNULL(ТоварыРазмещение.Ячейка, ТоварыРазмещениеБезОснования.Ячейка) КАК Ячейка    , 
			|	ВЫБОР
			|		КОГДА ВидыНоменклатурыЕССН.ВидНоменклатурыНовый ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Новый  
			|ИЗ
			|	Документ." + ИмяДокумента + ".Серии КАК Документ
	        |       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |            	Документ.Серия КАК Серия,
	        |            	МАКСИМУМ(ТоварыРазмещение.Ячейка) КАК Ячейка
	        |           ИЗ
	        |            	Документ." + ИмяДокумента + ".Серии КАК Документ
	        |            		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ТоварыРазмещение
	        |            		ПО Документ.Ссылка = ТоварыРазмещение.Ссылка.евт_ДокументОснование
	        |            			И Документ.Серия = ТоварыРазмещение.Серия
	        |           ГДЕ
	        |            	Документ.Ссылка В(&МассивОбъектов)
	        |
	        |           СГРУППИРОВАТЬ ПО
	        |            	Документ.Серия) КАК ТоварыРазмещение
	        |       ПО Документ.Серия = ТоварыРазмещение.Серия
	        |       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |            	Документ.Серия КАК Серия,
	        |            	МАКСИМУМ(ТоварыРазмещение.Ячейка) КАК Ячейка
	        |           ИЗ
	        |            	Документ." + ИмяДокумента + ".Серии КАК Документ
	        |            		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ТоварыРазмещение
	        |            		ПО Документ.Серия = ТоварыРазмещение.Серия
	        |                       И ЕСТЬNULL(ТоварыРазмещение.Ссылка.евт_ДокументОснование.Ссылка, ЗНАЧЕНИЕ(Документ.ПриходныйОрдерНаТовары.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ПриходныйОрдерНаТовары.ПустаяСсылка)
	        |           ГДЕ
	        |            	Документ.Ссылка В(&МассивОбъектов)
	        |
	        |           СГРУППИРОВАТЬ ПО
	        |            	Документ.Серия) КАК ТоварыРазмещениеБезОснования
	        |       ПО Документ.Серия = ТоварыРазмещениеБезОснования.Серия
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыНоменклатурыЕССН КАК ВидыНоменклатурыЕССН
			|		ПО Документ.Номенклатура.ВидНоменклатуры = ВидыНоменклатурыЕССН.ВидНоменклатурыНовый         
			|ГДЕ
			|	Документ.Ссылка В(&МассивОбъектов)";
	КонецЕсли;
	
	//ШаблонЭтикетки        = ДанныеПечати.ШаблонЭтикетки;
	//КоличествоЭкземпляров = СтрокаТаблицы.КоличествоЭкземпляров;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураНастроек.ИсходныеДанные = Запрос.Выполнить().Выгрузить(); //ПолучитьИзВременногоХранилища(ДанныеПечати.Товары);
	
	СтруктураШаблона = Справочники.ШаблоныЭтикетокИЦенников.ПодготовитьСтруктуруМакетаШаблона(ПолучитьМакет("ШаблонБирки"), Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров);
	
	СтруктураШаблонаЕССН =  Справочники.ШаблоныЭтикетокИЦенников.ПодготовитьСтруктуруМакетаШаблона(ПолучитьМакет("ШаблонБиркиЕССН"), Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров);
	

	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;                               
	Для Каждого Элемент Из СтруктураШаблонаЕССН.ПараметрыШаблона Цикл
		Если  СтруктураНастроек.ОбязательныеПоля.Найти(Элемент.Ключ) = Неопределено Тогда    			
			СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
		КонецЕсли;
		
	КонецЦикла;

	СтруктураНастроек.ОбязательныеПоля.Добавить("Новый")	;
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "СерииНоменклатуры", ИмяДокумента);
	
	Эталон = ПолучитьМакет("Эталон");
	
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	НомерКолонки = 0;
	НомерРяда = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.Таблица Цикл
		Если СтрокаТаблицы.Новый Тогда		
			СтруктураШаблона =СтруктураШаблонаЕССН;
	    КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",         200);// Окр(Область.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",         100);// Окр(Область.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(СтрокаТаблицы.Серия)));
		ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    6);
		ПараметрыШтрихкода.Вставить("БезопасныйРежим", Ложь);
	
		Картинка_ШКСерии = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		Область.Параметры["ШтрихкодСерии"] = Картинка_ШКСерии;
		
		ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(ИмяПараметраШтрихкод())];
	
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",         200);// Окр(Область.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",         100);// Окр(Область.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(ЗначениеШтрихкода));
		ПараметрыШтрихкода.Вставить("ТипКода",         СтруктураШаблона.ТипКода);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта);
		ПараметрыШтрихкода.Вставить("БезопасныйРежим", Ложь);
					
		Картинка_ШКНоменклатуры = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		Область.Параметры["ШтрихкодНоменклатуры"] = Картинка_ШКНоменклатуры;
		
		Для Инд = 1 По 1 Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, ТабличныйДокумент.ВысотаТаблицы, ОбъектыПечати, СтрокаТаблицы.Серия);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#Область ПрограммныйИнтерфейс

// Функция подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Возвращаемое значение:
//  Стрруктура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, Режим, ИмяДокумента) Экспорт
	
	Если СтруктураНастроек.ИсходныеДанные <> Неопределено Тогда
		ИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать();
	Иначе
		ИсходныеДанные = Неопределено;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Таблица",                             Неопределено);
	СтруктураРезультата.Вставить("СоответствиеПолейСКДКолонкамТаблицы", Новый Соответствие);

#Область ПодготовкаСхемыКомпоновкиДанныхИКомпоновщикаНастроекСкд
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

#КонецОбласти

#Область ПодготовкаВспомогательныхДанныхДляСопоставленияПолейШаблонаИСкд
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;

#КонецОбласти

#Область ВыполнениеЗапроса
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Если ИсходныеДанные <> Неопределено Тогда
		
		Если ИмяДокумента= "РасходныйОрдерНаТовары" Тогда
			ТекстВременнойТаблицы =					"
			|	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка) КАК Документ,
			|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Ячейка,
			|		0 КАК Количество,
			|		0 КАК Порядок,
			|		ЛОЖЬ КАК Новый)";
			;
			
		Иначе
			
			
			ТекстВременнойТаблицы =			
			"
			|	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ."+ИмяДокумента+".ПустаяСсылка) КАК Документ,
			|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Ячейка,
			|		0 КАК Количество,
			|		0 КАК Порядок,
			|		ЛОЖЬ КАК Новый)";
			;
			
		КонецЕсли;
				
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, " &Таблица");
		
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
		Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
	конецесли;
	
 	СтруктураРезультата.Таблица = Запрос.Выполнить().Выгрузить();	
		
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#КонецОбласти


Функция ИмяПараметраШтрихкод()
	
	Возврат "Штрихкод";
	
КонецФункции

Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		
		ЗначениеПараметраКомпоновкиДанных.Значение = ЗначениеПараметра;
		ЗначениеПараметраКомпоновкиДанных.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраКомпоновкиДанных.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции


